generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Feedback {
  id      Int    @id @default(autoincrement())
  message String
  userId  Int
  choreId Int
  type    String
  chore   Chore  @relation(fields: [choreId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([choreId], map: "idx_feedback_choreId")
  @@index([userId], map: "idx_feedback_userId")
}

model Chore {
  id           Int             @id @default(autoincrement())
  name         String
  description  String?
  userId       Int?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  instruction  String?
  category     Chore_Category?
  status       Chore_Status?   @default(PENDING)
  image        String?
  cloudinaryId String?
  isPrimary    Boolean         @default(false)
  houseId      Int
  house        House           @relation(fields: [houseId], references: [id])
  user         User?           @relation(fields: [userId], references: [id])
  ChoreLogs    ChoreLog[]
  feedback     Feedback[]
  currentUsers User[]          @relation("UserCurrentChore")

  @@index([userId], map: "idx_chore_userId")
  @@index([houseId], map: "idx_chore_houseId")
}

model User {
  id               Int              @id @default(autoincrement())
  name             String
  email            String           @unique(map: "uq_user_email")
  phone            String
  gender           User_gender
  role             User_role
  image            String?
  joinedDate       DateTime?
  leavingDate      DateTime?
  password         String
  houseId          Int?
  currentChoreId   Int?            
  lastname         String?
  firstname        String?
  expoPushToken    String?
  employmentStatus String?
  schoolStatus     String?
  periodStart      DateTime?
  periodEnd        DateTime?
  assignments      Assignment[]     @relation("assignments")
  chatUsers        ChatUser[]
  chores           Chore[]
  ChoreLogs        ChoreLog[]
  feedback         Feedback[]
  messages         Message[]
  currentChore     Chore?           @relation("UserCurrentChore", fields: [currentChoreId], references: [id])
  house            House?           @relation(fields: [houseId], references: [id])
  userWorkPeriods  UserWorkPeriod[]
  workPeriods      WorkPeriod[]     @relation("UserWorkPeriods")
  WorkPeriod       WorkPeriod[]

  @@index([houseId], map: "idx_user_houseId")
  @@index([currentChoreId], map: "idx_user_currentChoreId")
}

model House {
  id           Int          @id @default(autoincrement())
  abbreviation String
  capacity     Int
  name         String
  workPeriodId Int?
  assignments  Assignment[]
  chats        Chat[]
  chores       Chore[]
  users        User[]
}

model Scripture {
  id        Int       @id @default(autoincrement())
  verse     String
  scripture String
  version   String
  book      String
  createdAt DateTime?
  updatedAt DateTime?
}

model Assignment {
  id        Int       @id @default(autoincrement())
  managerId Int
  houseId   Int
  startDate DateTime
  endDate   DateTime?
  house     House     @relation(fields: [houseId], references: [id])
  manager   User      @relation("assignments", fields: [managerId], references: [id])

  @@index([managerId])
  @@index([houseId])
}

model ChoreLog {
  id           Int         @id @default(autoincrement())
  userId       Int
  choreId      Int
  date         DateTime
  minutes      Int
  createdAt    DateTime    @default(now())
  chore        Chore       @relation(fields: [choreId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  workPeriodId Int?
  workPeriod   WorkPeriod? @relation(fields: [workPeriodId], references: [id])

  @@index([userId, date])
  @@index([workPeriodId])
}

model WorkPeriod {
  id               Int              @id @default(autoincrement())
  name             String
  startDate        DateTime
  endDate          DateTime
  carryOverEnabled Boolean          @default(false)
  userId           Int // Add this field
  user             User             @relation(fields: [userId], references: [id])
  choreLogs        ChoreLog[]
  User             User[]           @relation("UserWorkPeriods")
  UserWorkPeriod   UserWorkPeriod[]

  @@index([userId])
}

model UserWorkPeriod {
  id               Int        @id @default(autoincrement())
  userId           Int
  workPeriodId     Int
  requiredMinutes  Int
  completedMinutes Int
  carryOverMinutes Int        @default(0)
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workPeriod       WorkPeriod @relation(fields: [workPeriodId], references: [id])

  @@unique([userId, workPeriodId])
}

model Chat {
  id        Int        @id @default(autoincrement())
  name      String?
  isGroup   Boolean    @default(false)
  houseId   Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  house     House?     @relation(fields: [houseId], references: [id], onDelete: Cascade)
  users     ChatUser[]
  messages  Message[]
}

model ChatUser {
  id     Int  @id @default(autoincrement())
  userId Int
  chatId Int
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Message {
  id           Int      @id @default(autoincrement())
  chatId       Int
  senderId     Int
  content      String?
  image        String?
  createdAt    DateTime @default(now())
  readBy       Int[]
  cloudinaryId String?
  chat         Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender       User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([senderId])
}

model NotificationLog {
  id     Int      @id @default(autoincrement())
  userId Int
  type   String
  sentAt DateTime @default(now())
}

enum User_gender {
  MALE
  FEMALE
  OTHER
}

enum User_role {
  SUPER_ADMIN
  DIRECTOR
  MANAGER
  RESIDENT
}

enum Chore_Category {
  HOUSEHOLD
  MAINTENANCE
  SUPPORT
}

enum Chore_Status {
  PENDING
  REVIEWING
  APPROVED
  REJECTED
}
